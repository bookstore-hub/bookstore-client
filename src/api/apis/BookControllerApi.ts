/* tslint:disable */
/* eslint-disable */
/**
 * Bookstore - Server
 * Service that exposes the Bookstore API via REST
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetData,
  GetListedData,
  NewData,
} from '../models/index';
import {
    GetDataFromJSON,
    GetDataToJSON,
    GetListedDataFromJSON,
    GetListedDataToJSON,
    NewDataFromJSON,
    NewDataToJSON,
} from '../models/index';

export interface AddBookRequest {
    newData: NewData;
}

export interface EditBookRequest {
    bookCode: string;
    newData: NewData;
}

export interface RemoveBookRequest {
    bookCode: string;
}

export interface RetrieveBookDetailsRequest {
    bookCode: string;
}

export interface SearchBooksRequest {
    title?: string;
    author?: string;
}

/**
 * 
 */
export class BookControllerApi extends runtime.BaseAPI {

    /**
     * Adds a new book
     */
    async addBookRaw(requestParameters: AddBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetData>> {
        if (requestParameters['newData'] == null) {
            throw new runtime.RequiredError(
                'newData',
                'Required parameter "newData" was null or undefined when calling addBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/book`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewDataToJSON(requestParameters['newData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDataFromJSON(jsonValue));
    }

    /**
     * Adds a new book
     */
    async addBook(requestParameters: AddBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetData> {
        const response = await this.addBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edits a book entry
     */
    async editBookRaw(requestParameters: EditBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetData>> {
        if (requestParameters['bookCode'] == null) {
            throw new runtime.RequiredError(
                'bookCode',
                'Required parameter "bookCode" was null or undefined when calling editBook().'
            );
        }

        if (requestParameters['newData'] == null) {
            throw new runtime.RequiredError(
                'newData',
                'Required parameter "newData" was null or undefined when calling editBook().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bookCode'] != null) {
            queryParameters['bookCode'] = requestParameters['bookCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/book`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewDataToJSON(requestParameters['newData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDataFromJSON(jsonValue));
    }

    /**
     * Edits a book entry
     */
    async editBook(requestParameters: EditBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetData> {
        const response = await this.editBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a book
     */
    async removeBookRaw(requestParameters: RemoveBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookCode'] == null) {
            throw new runtime.RequiredError(
                'bookCode',
                'Required parameter "bookCode" was null or undefined when calling removeBook().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bookCode'] != null) {
            queryParameters['bookCode'] = requestParameters['bookCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/book`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a book
     */
    async removeBook(requestParameters: RemoveBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeBookRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a book details
     */
    async retrieveBookDetailsRaw(requestParameters: RetrieveBookDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetData>> {
        if (requestParameters['bookCode'] == null) {
            throw new runtime.RequiredError(
                'bookCode',
                'Required parameter "bookCode" was null or undefined when calling retrieveBookDetails().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bookCode'] != null) {
            queryParameters['bookCode'] = requestParameters['bookCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/book`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDataFromJSON(jsonValue));
    }

    /**
     * Retrieve a book details
     */
    async retrieveBookDetails(requestParameters: RetrieveBookDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetData> {
        const response = await this.retrieveBookDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all books
     */
    async retrieveBooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetListedData>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/book/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetListedDataFromJSON));
    }

    /**
     * Retrieves all books
     */
    async retrieveBooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetListedData>> {
        const response = await this.retrieveBooksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all books for a specific title or author
     */
    async searchBooksRaw(requestParameters: SearchBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetListedData>>> {
        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['author'] != null) {
            queryParameters['author'] = requestParameters['author'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/book/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetListedDataFromJSON));
    }

    /**
     * Retrieve all books for a specific title or author
     */
    async searchBooks(requestParameters: SearchBooksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetListedData>> {
        const response = await this.searchBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
